#! /bin/bash


echo
echo ======================================================
echo ======================================================
echo ====== Start reading from cfg file ===================
echo ======================================================
echo ======================================================

echo
# get the generated report file
input="benchmark_cfg" 
# go thru the content of the file line by line
while IFS= read -r line
do
  echo $line
  # go thru each line in the cfg file
  if [[ "$line" == *"fft"* ]] || [[ "$line" == *"barnes"* ]]; then
    # store each line as an array
    array=($line)
    # the benchmark is written on the first position
    benchmark=${array[0]}
    # number of cores on the second possition
    cores=${array[1]}

echo
# print what benchmark we will run
echo ==================================================================
echo ==================================================================
echo ================= Start benchmark on $benchmark, $((cores)) core =================
echo ==================================================================
echo ==================================================================
echo

    cd
    cd sniper/benchmarks
    # execute the benchmark command with the correct number of cores
    ./run-sniper -p splash2-$benchmark -i test -n $((cores)) -c ES_2019 -d results/$benchmark/$cores


# print what we will do next
echo
echo ==================================================
echo ==================================================
echo ====== Start reading from file ===================
echo ==================================================
echo ==================================================
echo
# get the generated report file
input="/home/rhadu/sniper/benchmarks/results/"$benchmark"/"$((cores))"/sim.out" 
# go thru the content of the file line by line
while IFS= read -r line
do
  # print new line from file
  echo "$line"
  # check if we are the line with the Instructions =======================
  if [[ "$line" == *"Instructions"* ]]; then
     # once the line is found
     # the instruction actual number is located as the 3rd element in string. Store it in a variable
     array=($line)
     nr_of_instructions_per_core=${array[2]}
     # the total number of instruction is given by the number of cores * number of instructions per core
     nr_of_instructions=$((nr_of_instructions_per_core*$((cores))))
  fi
  # check if we are the line with the IPC ===============================
  if [[ "$line" == *"IPC"* ]]; then
     # once the line is found
     # the IPC actual number is located as the 3rd element in string. Store it in a variable
     array=($line)
     nr_of_IPC_per_core=${array[2]}
     # the total number of IPC is given by the number of cores * number of IPC per core
     nr_of_IPC=$(expr $nr_of_IPC_per_core*$((cores)) | bc)
  fi
  # calculate power disipation
  # P = C*V*V*f
  # C - capacitance, f - frequency, V - voltage
done < "$input" # done with the while

echo
echo ====================== Done going thru file ==================
echo "Number of instructions found: "$nr_of_instructions
echo "Number of IPC found: 0"$nr_of_IPC
 

  fi
done < "$input" # done with the while




